// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  password    String
  avatar      String? @map("avatar")
  phoneNumber String  @map("phone_number")
  roleId      String  @map("role_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  role Role @relation(fields: [roleId], references: [id])

  userAddresses     UserAddresses[]
  shipmentBranchLog ShipmentBranchLog[]
  shipmentDetail    ShipmentDetail[]
  shipmentHistory   ShipmentHistory[]
  employeeBranch    EmployeeBranch[]

  @@map("users")
}

model Role {
  id        String   @id @default(cuid())
  name      String
  key       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user            User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  resource  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserAddresses {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  address   String
  tag       String?
  latitude  Float?
  longitude Float?
  label     String?
  photo     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipmentDetail ShipmentDetail[]

  @@map("user_adresses")
}

model Shipment {
  id             String   @id @default(cuid())
  paymentStatus  String   @map("payment_status")
  deliveryStatus String?  @map("delivery_status")
  trackingNumber String?  @map("tracking_number")
  price          Float?
  distance       Float?
  qrCodeImage    String?  @map("qr_code_image")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  payment           Payment[]
  shipmentBranchLog ShipmentBranchLog[]
  shipmentDetail    ShipmentDetail[]
  shipmentHistory   ShipmentHistory[]

  @@map("shipments")
}

model Branch {
  id                String              @id @default(cuid())
  name              String
  address           String
  phoneNumber       String              @map("phone_number")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  shipmentBranchLog ShipmentBranchLog[]
  shipmentHistory   ShipmentHistory[]
  employeeBranch    EmployeeBranch[]

  @@map("branches")
}

model EmployeeBranch {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  branchId  String   @map("branch_id")
  type      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  @@map("employee_branches")
}

model Payment {
  id             String    @id @default(cuid())
  shipmentId     String    @map("shipment_id")
  paymentMethod  String?   @map("payment_method")
  status         String?
  expirationDate DateTime? @map("expiration_date")
  externalId     String?   @map("external_id")
  invoiceId      String?   @map("invoice_id")
  invoiceUrl     String?   @map("invoice_url")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ShipmentBranchLog {
  id              String   @id @default(cuid())
  shipmentId      String   @map("shipment_id")
  branchId        String   @map("branch_id")
  trackingNumber  String   @map("tracking_number")
  type            String
  status          String
  description     String?
  scannedByUserId String   @map("scanned_by_user_id")
  scanTime        DateTime @map("scan_time")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")

  shipment      Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  branch        Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  scannedByUser User     @relation(fields: [scannedByUserId], references: [id], onDelete: Cascade)

  @@map("shipment_branch_logs")
}

model ShipmentDetail {
  id                   String   @id @default(cuid())
  shipmentId           String   @map("shipment_id")
  userId               String   @map("user_id")
  pickupAddressId      String   @map("pickup_address_id")
  weight               Float?
  deliveryType         String   @map("delivery_type")
  destinationAddress   String   @map("destination_address")
  packageType          String   @map("package_type")
  pickupProof          String?  @map("pickup_proof")
  receiptProof         String?  @map("receipt_proof")
  destinationLatitude  Float?   @map("destination_latitude")
  destinationLongitude Float?   @map("destination_longitude")
  recipientName        String?  @map("recipient_name")
  recipientPhone       String?  @map("recipient_phone")
  basePrice            Float?   @map("base_price")
  distancePrice        Float?   @map("distance_price")
  weightPrice          Float?   @map("weight_price")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @map("updated_at")

  shipment      Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  pickupAddress UserAddresses @relation(fields: [pickupAddressId], references: [id], onDelete: Cascade)

  @@map("shipment_details")
}

model ShipmentHistory {
  id          String   @id @default(cuid())
  shipmentId  String   @map("shipment_id")
  branchId    String?  @map("branch_id")
  userId      String?  @map("user_id")
  status      String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  shipment Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  branch   Branch?  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shipment_histories")
}
